package e_Chapter04;

//객체지향프로그래밍
//OOP (Object_Oriented Programming)

// 객체란?
// 데이터(속성)와 해당 데이터를 처리하는 방법을 포함하는 프로그래밍 기본 단위

// ex) 커피자판기의 속성
// - 커피의 종류
// - 가격
// - 현재 재고
// - 물의 온도

// 자판기의 기능(메서드)
// - 커피 제조
// - 재고 관리
// - 가격 설정

// 객체 지향 프로그래밍의 예시
// ex) 학교 관리 ' 시스템' 구축

// 학생 객체
//(이름, 학번, 수강과목) 등의 데이터
// 성적 조회, 수강 신청 등의 메서드

// 교수 객체
// 이름, 연구 분야, 담당 분야 등의 데이터
// 강의 계획서 업로드, 성적 입력

// 수업 객체
// 과목명, 강의 시간 강의실 등의 데이터
// 강의 자료 업로드, 출석 체크 등의 메서드


public class Object01 {

	public static void main(String[] args) {
		//객체 지향 프로그래밍의 주요 개념
		// 1. 클래스
		// 객체를 생성하기 위한 템플릿, 데이터와 메서드를 정의
		// ex)자동차 클래스
		// - 속성(색상, 브랜드, 모델)
		// - 메서드(주행, 정지, 속도변경)
		
		// 2. 객체
		// 클래스의 인스턴스, 실제로 메모리에 할당되어 동작하는 구체적인 엔티티
		// ex) 자동차 클래스를 기반으로 만들어진 실제 자동차 
		// 
		// 3. 상속
		// 한 클래스(부모)의ㅣ 속성과 메서드를 다른 클래스(자식)가 받아서 사옹하는 기능
		// 전기 자동차 클래스
		// 일반 자동차 클래스의 모든 특성을 받고, 추가적으로 배터리 관련 속성과 충전 메서드를 가짐
		
		// 4. 다형성
		// 같은 메서드 호출이 다른 클래스의 객체에 대해 다른 방식으로 실행 가능
		// 
		
		// 5. 캡슐화
		// 객체의 데이터를 외부로부터 숨기고, 내부의 메소드를 통해서만 
		// 해당 데이터를 조작할 수 있게 하는 것
		
		// 6. 추상화
		// 복잡한 세부사항을 숨기고 사용자에게 필요한 정보만 제공
		// ex) 자동차 운전자는 자동차의 모든 부품, 원리를 알지 않아도
		
		// 객체 지향 프로그래밍의 장점
		// - 재사용성 증가
		// - 유지 보수성 증가
		// - 확장성 증가
		
		// 자바에서의 객체 지향 프로그래밍
		// 코드의 모든 구조가 객체로 표현 가능
		// 프로그램의 유엿넝과 모듈성 증가
		
	}

}
